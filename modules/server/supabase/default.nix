# Auto-generated using compose2nix v0.3.2-pre.
{ pkgs, ... }:

{
  # Runtime
  virtualisation.docker = {
    enable = true;
    autoPrune.enable = true;
  };
  virtualisation.oci-containers.backend = "docker";

  imports = [
    ./api.nix
    ./database.nix
    # ./functions.nix
    # ./storage.nix
    ./studio.nix
  ];

  services.nginx.virtualHosts = {
    "studio.homehub.tv" = {
      forceSSL = true;
      useACMEHost = "homehub.tv";
      locations."/" = {
        proxyPass = "http://localhost:8800";
        proxyWebsockets = true;
      };
    };
  };

  # Networks
  systemd.services."docker-network-supabase_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f supabase_default";
    };
    script = ''
      docker network inspect supabase_default || docker network create supabase_default
    '';
    partOf = [ "docker-compose-supabase-root.target" ];
    wantedBy = [ "docker-compose-supabase-root.target" ];
  };

  # Volumes
  systemd.services."docker-volume-supabase_db-config" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
    };
    script = ''
      docker volume inspect supabase_db-config || docker volume create supabase_db-config
    '';
    partOf = [ "docker-compose-supabase-root.target" ];
    wantedBy = [ "docker-compose-supabase-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-supabase-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
